#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//1-1
struct ROKMC
{
    char team[30];
    int Dog_tag;
    char Classes[30];
    char name[30];
};

int main()
{
    struct ROKMC ARMY;
    
    printf("소속 : \n");
    scanf("%s", ARMY.team);
    printf("군번 : \n");
    scanf("%d", &ARMY.Dog_tag);
    printf("계급 : \n");
    scanf("%s", ARMY.Classes);
    printf("이름 : \n");
    scanf("%s", ARMY.name);
    
    printf("소속 : %s\n 군번 : %d\n 계급 : %s\n 이름 : %s", ARMY.team, ARMY.Dog_tag, ARMY.Classes, ARMY.name);
}
--------------------------------------------------
//1-1
struct ROKMC
{
    char team[30];
    int Dog_tag;
    char Classes[30];
    char name[30];
};
int main()
{
    
    struct ROKMC ARMY = {.team = "연화리", .Dog_tag = 2072003913, ARMY.Classes = "상병", ARMY.name = "이재은"};
    struct ROKMC ARMY2 = {.team = "장골", .Dog_tag = 2072003999, ARMY.Classes = "병장", ARMY.name = "김바바"};
    
    printf("소속 : %s군번 : %d계급 : %d이름 : %s", ARMY.team, ARMY.Dog_tag, ARMY.Classes, ARMY.name);
    
    printf("소속 : %s군번 : %d계급 : %d이름 : %s", ARMY2.team, ARMY2.Dog_tag, ARMY2.Classes, ARMY2.name);
}
--------------------------------------------------
//1-2
    typedef struct _Student {
        int age;
        char phone_number[14];
    } Student;

int main()
{
Student groom;
    
    printf("나이 : ");
    scnaf("%d", &groom.age);
    printf("번호 : ");
    scnaf("%d", &groom.phone_number);
    
    printf("나이 : %d 번호 : %d", groom.age, groom.phone_number);

}
--------------------------------------------------
//(1-3)
    typedef struct{
        char team[15];
        char Dog_tag[15];
    } ROKMC;

int main()
{
    ROKMC ARMY;
    
    printf("계급 : ");
    scanf("%s", ARMY.team);
    printf("군번 : ");
    scanf("%s", ARMY.Dog_tag);
    
    printf("계급 : %s 군번 : %s", ARMY.team, ARMY.Dog_tag);
}
--------------------------------------------------
//(1-4)
    typedef struct {
        char team[30];
        int Dog_tag;
    } ROKMC;

int main()
{
    ROKMC ARMY[2] = { {.team = "연화리"}, {.team = "사항포" } } ;
    
    ARMY.Dog_tag[0] = 2012982;
    ARMY.Dog_tag[1] = 12515125;
    
    printf("소속 : %s / 군번 : %d", ARMY.team[0], ARMY.Dog_tag[0]);
    printf("소속 : %s / 군번 : %d", ARMY.team[1], ARMY.Dog_tag[1]);
}
--------------------------------------------------
//(1-5)
    typedef struct {
        int s_id;
        int age;
    } Student;

int main(){
    Student groom;
    Student &ptr;
    
    ptr = &groom;
    
    (&ptr).s_id = 1004;
    (&ptr).age = 20;
    
    printf("groom의 학번 : %d, 나이 : %d\n", groom.s_id, groom.age);
}
--------------------------------------------------
//(1-6)
    typedef struct {
        int s_id;
        int age;
    } Student;
int main(){
    Student groom;
    Student *ptr;
    
    ptr = &groom;
    
    (*ptr).s_id = 1004;
    ptr -> age = 20 ;
    
    printf("groom의 학번 : %d, 나이 : %d\n", groom.s_id, groom.age);
}
--------------------------------------------------
//(0-0)
    typedef struct abc
    {
        int a[10000];
        char b[10000];
    }S_ABC;

void call_you(S_ABC abc_struct_2)
{
    /* ~~~~ */
}

void main()
{
    S_ABC abc_struct_1;
    call_you(abc_struct_1);
}
--------------------------------------------------
//(1-7)
    typedef struct {
        char name[15];
        int age;
    } Teacher;

typedef struct {
    char name[15];
    int age;
    Teacher teacher;
} Student;

int main()
{
    Student Student;
    Teacher Teacher;
    
    Student.teacher.age = 30;
    Teacher.age = 40;
    
    return 0;
}
--------------------------------------------------    
//(1-8)
    typedef struct{
        char name[15];
        int age;
        struct Student &ptr;
    } Student;
--------------------------------------------------
//(1-9)
    typedef struct {
        int s_id;
        int age;
    } Student;

void print_student(Student s){
    s.s_id = 2000;
    s.age = 25;
    
    printf("학번 : %d, 나이 : %d\n", s.s_id, s.age);
}

int main()
{
    Student s;
    
    s.s_id = 1000;
    s.age = 20;
    
    printf_student(s);
    
    printf("학번 : %d, 나이 : %d\n", s.s_id, s.age);
}
결과 값
학번 : 2000, 나이 : 25
학번 : 1000, 나이 : 20
--------------------------------------------------
//(1-10)
    typedef struct {
        int s_id;
        int age;
    } Student ;

void printf_student(Student *s)
{
    s->s_id = 2000;
    s->age = 25;
    
    printf("학번 : %d, 나이 : %d\n", s->s_id, s->age);
}

int main()
{
    Student s;
    
    s.s_id = 1000;
    s.age = 20;
    
    printf_student(&s);
    
    printf("학번 : %d, 나이 : %d\n", s.s_id, s.age);
}
결과 값
학번 : 2000, 나이 : 25
학번 : 2000, 나이 : 25
--------------------------------------------------
// 구조체 실습
    // 구조체 배열 사용하기
typedef struct
{
	char name[30];
	int kor; // 국어
	int eng; // 영어
	int math; // 수학
	float avg; // 평균
} Student;

int main()
{
	Student student;
	
	for(int i=0; i<3; i++)
	{
		scanf("%s", student.name);
		scanf("%d", &student[i].kor);
		scanf("%d", &student[i].eng);
		scanf("%d", &student[i].math);
		&student[i].avg = (&student[i].kor+&student[i].eng+&student[i].math)/3;
	}

	for(int j=0; j<3; j++)
	{
		printf("%s", student.name);
		printf("%.f ", &student[j].avg);
	}
	
	return 0;
}
---------------------------
typedef struct 
{
	char name[30];
	int kor; // 국어
	float avg; // 평균
} Student;

int main()
{
	Student s[3];
	
	for(int i=0; i<2; i++)
	{
		scanf("%s", &s[i].name);
		scanf("%d", &s[i].kor);
		s[i].avg = (float)(s[i].kor)/2.0;
	}

	for(int j=0; j<2; j++)
	{
		printf("%s", s[j].name);
		printf("%.f ", s[j].avg);
	}
	
	return 0;
}
---------------------------
typedef struct
{
	char name[10];
	int kor; // 국어
	int eng; // 영어
	int math; // 수학
	float avg; // 평균
} Student;

int main()
{
	Student std[3];
	
	for(int i=0;i<3;i++)
	{
		scanf("%s",&std[i].name);
		scanf("%d",&std[i].kor);
		scanf("%d",&std[i].math);
		scanf("%d",&std[i].eng);
		std[i].avg = (float)(std[i].kor+std[i].math+std[i].eng)/3;
	}

	for(int i=0;i<3;i++)
	{
		printf("%s ",std[i].name);
		printf("%.1f\n",std[i].avg);
	}
	
	return 0;
}
---------------------------
typedef struct{
	char name[30];
	int kor;
	int math;
	int eng;
	float avg;
} Student;

int main()
{
	Student exam[3];
	
	for(int i=0; i<3; i++)
	{
		scanf("%s",&exam[i].name);
		scanf("%d",&exam[i].kor);
		scanf("%d",&exam[i].math);
		scanf("%d",&exam[i].eng);
		
		exam[i].avg = (float)(exam[i].kor+exam[i].math+exam[i].eng)/3;
	}
	for(int i=0; i<3; i++)
	{
		printf("이름 : %s, 평균 : %.1f\n", exam[i].name,exam[i].avg);
	}
}
-------------------------------------------------
//(2-1예제)
    
int main()
{
    srand(time(NULL));
    
    int random = rand();
    
    printf("%d", random);
}
결과 : 랜덤한 수
------------------------------------------------- 
//(2-2예제)

int main()
{
	int diceCount = 0; // 현재 몇 번이나 주사위를 굴렸는지 확인하는 변수
	int diceEnd = 3; // 총 몇번 주사위를 굴릴지 결정하는 변수
	int mScore = 0; // (my score) 플레이어의 점수
	int cScore = 0; // (computer score) 컴퓨터의 점수
	int selection; // 사용자가 게임 진행에 몇 번을 선택했는지 입력받는 변수

	return 0;
}
-------------------------------------------------
//(2-3예제)
void checkScore(int mScore, int cScore) {
  printf("\n-------------------------");
  printf("\n현재 각 플레이어의 점수입니다.");
  printf("\n플레이어의 점수 : %d", mScore);
  printf("\n컴퓨터의 점수 : %d", cScore);
  printf("\n-------------------------");
}

int main() {
  int diceCount = 0;
  int diceEnd = 3;
  int mScore = 0;
  int cScore = 0;
  int selection;
  srand(time(NULL));
		
  printf("게임 설명 : 주사위를 총srand(time(NULL))3 번 굴려 합친 주사위 눈의 합이 더 높은 사람이 이기게 됩니다.");
  printf("\n주사위 게임을 시작하겠습니다.");
  printf("\n------------------------");
  
  while(diceCount < diceEnd) {
    printf("\n주사위를 굴려주세요. 1번 주사위 굴리기 2번 현재 눈의 합 확인하기 : ");
    scanf("%d", &selection);
    
    if(selection == 1) {
      int jen = (rand()%6)+1;
			int Com = (rand()%6)+1;
			mScore += jen;
			cScore += Com;
printf("\n플레이어의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", jen);
			printf("\n현재 총 점수는 %d 입니다.", mScore);

			printf("\n컴퓨터의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", Com);
			printf("\n현재 총 점수는 %d 입니다.", cScore);
    } else if(selection==2) {
      checkScore(mScore, cScore);
    } else {
      printf("\n잘못 입력하셨습니다. 다시 입력해주세요.");
    }
  }

  return 0;
}
-------------------------------------------------
//(2-4예제)
void checkScore(int mScore, int cScore)
{
	printf("\n-------------------------");
	printf("\n현재 각 플레이어의 점수입니다.");
	printf("\n플레이어의 점수 : %d", mScore);
	printf("\n컴퓨터의 점수 : %d", cScore);
	printf("\n-------------------------");
}

int main()
{
	int diceCount = 0;
	int diceEnd = 3;
	int mScore = 0;
	int cScore = 0;
	int selection;
	srand(time(NULL));

	printf("게임 설명 : 주사위를 총 3 번 굴려 합친 주사위 눈의 합이 더 높은 사람이 이기게 됩니다.");
	printf("\n주사위 게임을 시작하겠습니다.");
	printf("\n------------------------");

	while(diceCount < diceEnd) {
		printf("\n주사위를 굴려주세요. 1번 주사위 굴리기 2번 현재 눈의 합 확인하기 : ");
		scanf("%d", &selection);

		if(selection == 1) {
			int mResult = (rand() % 6) + 1;
			int cResult = (rand() % 6) + 1;

			mScore += mResult;
			cScore += cResult;

			printf("\n플레이어의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", mResult);
			printf("\n현재 총 점수는 %d 입니다.", mScore);

			printf("\n컴퓨터의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", cResult);
			printf("\n현재 총 점수는 %d 입니다.\n\n", cScore);

			diceCount++;
		} else if(selection == 2) {
			checkScore(mScore, cScore);
		} else {
			printf("\n잘못 입력하셨습니다.");
		}
	}

		if(mScore > cScore){
			printf("플레이어의 승리! 총점수 : %d\n컴퓨터의 패배! 총점수 : %d", mScore, cScore);}
			else if (mScore < cScore){
				printf("컴퓨터의 승리! 총점수 : %d\n플레이어의 패배! 총점수 : %d", cScore, mScore);}
				else {
					printf("무승부! 컴퓨터 점수 : %d 플레이어의 점수 : %d", cScore, mScore);}
			
	return 0;
}
-------------------------------------------------
//(2-4예제 정답)
void checkScore(int mScore, int cScore)
{
	printf("\n-------------------------");
	printf("\n현재 각 플레이어의 점수입니다.");
	printf("\n플레이어의 점수 : %d", mScore);
	printf("\n컴퓨터의 점수 : %d", cScore);
	printf("\n-------------------------");
}
void ShowEndig(int mScore, int cScore)
{
	printf("\n-------------------------");
	if(mScore > cScore){
		printf("플레이어의 승리!");
	}
	else if(mScore < cScore){
		printf("컴퓨터의 승리!");
	}
	else{
		printf("무승부!");
	}
}


int main()
{
	int diceCount = 0;
	int diceEnd = 3;
	int mScore = 0;
	int cScore = 0;
	int selection;
	srand(time(NULL));

	printf("게임 설명 : 주사위를 총 3 번 굴려 합친 주사위 눈의 합이 더 높은 사람이 이기게 됩니다.");
	printf("\n주사위 게임을 시작하겠습니다.");
	printf("\n------------------------");

	while(diceCount < diceEnd) {
		printf("\n주사위를 굴려주세요. 1번 주사위 굴리기 2번 현재 눈의 합 확인하기 : ");
		scanf("%d", &selection);

		if(selection == 1) {
			int mResult = (rand() % 6) + 1;
			int cResult = (rand() % 6) + 1;

			mScore += mResult;
			cScore += cResult;

			printf("\n플레이어의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", mResult);
			printf("\n현재 총 점수는 %d 입니다.", mScore);

			printf("\n컴퓨터의 차례입니다. 주사위를 굴립니다.");
			printf("\n띠링! 주사위의 눈은 %d 입니다.", cResult);
			printf("\n현재 총 점수는 %d 입니다.\n\n", cScore);

			diceCount++;
		} else if(selection == 2) {
			checkScore(mScore, cScore);
		} else {
			printf("\n잘못 입력하셨습니다.");
		}
	}

		if(mScore > cScore){
			printf("플레이어의 승리! 총점수 : %d\n컴퓨터의 패배! 총점수 : %d", mScore, cScore);}
			else if (mScore < cScore){
				printf("컴퓨터의 승리! 총점수 : %d\n플레이어의 패배! 총점수 : %d", cScore, mScore);}
				else {
					printf("무승부! 컴퓨터 점수 : %d 플레이어의 점수 : %d", cScore, mScore);}
			
	return 0;
}
-------------------------------------------------
// (3-1시험) 연습연습하자
    
int main()
{
    int arr[2][5] = {
        { 1, 2, 3, 4, 5},
        { 6, 7, 8, 9, 10}
    };
    int i, j;
    int rowLength = sizeof(arr) / sizeof(arr[0]);
    int columnLenght = sizeof(arr[0]) / sizeof(arr[0][0]);
    int result = 0;
    
    for(i=0; i<rowLength; i++){
        for(j=0; j<columnLenght; j++){
            result += arr[i][j];
        }
    }
    
    printf("%d", result);
    
    return 0;
}
// rowLength = 2
// columnLenght = 5
// sizeof(arr) 가 왜 40 이냐면 4바이트의 크기가 10개이므로 40임 궁금증해결!
-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main()
{
	int select;
	int End = 999;
	int i=0;
	int a,b;
	
	while(i < End){
		printf("1번 구구단, 2번 더하기, 3번 곱하기, 4번 빼기, 5번 종료\n\n");
	    scanf("%d", &select);
		if(select == 1)
		{
			printf("1번선택 구구단\n");
			scanf("%d", &a);
			for(int j=1; j<10; j++)
			{
			    printf("%d x %d = %d\n", a, j, a*j );
			}
			printf("\n");
		}
		
		else if(select == 2)
		{
			printf("2번선택 더하기\n");
			scanf("%d %d", &a, &b);
			printf("값은 : %d\n\n", a+b);
		}
		
		else if(select == 3)
		{
			printf("3번선택 곱하기\n");
			scanf("%d %d", &a, &b);
			printf("값은 : %d\n\n", a*b);
		}
		
		else if(select == 4)
		{
			printf("4번선택 빼기\n");
			scanf("%d %d", &a, &b);
			printf("값은 : %d\n\n", a-b);
		}
		else
		{
		    i=999;
			printf("시스템 종료");
		}
		i++;
	}
}
-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void Multiplication_table(int a)
{
	printf("1번선택 구구단\n");
	scanf("%d", &a);
	for(int j=1; j<10; j++)
	{
	    printf("%d x %d = %d\n", a, j, a*j );
	}
			printf("\n");
}
void Plus(int a, int b)
{
	printf("2번선택 더하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a+b);
}
void Multiply(int a, int b)
{
    printf("3번선택 곱하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a*b);
}
void subtract(int a, int b)
{
	printf("4번선택 빼기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a-b);
}
int main()
{
	int select;
	int End = 999;
	int i=0;
	int a,b;
	
	while(i < End){
	    printf("------------------------------------------------------\n");
		printf("1번 구구단, 2번 더하기, 3번 곱하기, 4번 빼기, 5번 종료\n\n");
	    scanf("%d", &select);
		if(select == 1)
		{
		    Multiplication_table(a);
		}
		
		else if(select == 2)
		{
		    Plus(a,b);
		}
		
		else if(select == 3)
		{
		    Multiply(a,b);
		}
		else if(select == 4)
		{
		    subtract(a,b);
		}
		else if(select == 5)
		{
		    printf("시스템 종료\n");
		    printf("------------------------------------------------------\n");
		    i = 999;
		}
		else
		{
		    i=999;
			printf("시스템 종료");
			printf("------------------------------------------------------\n");
		}
		i++;
	}
}
-------------------------------------------------
    // 구조체 형을 달른 구조체의 멤버로 사용.
#pragma warning(disable:4996)
#include <stdio.h>
#include <string.h>
struct profile
{
    char name[20];
    int age;
    double height;
};
struct student
{
    struct profile pf;
    int num;
    double grade;
};
 
int main(void)
{
    struct student a;
    strcpy(a.pf.name, "atom");
    a.pf.age = 17;
    a.pf.height = 187.5;
    a.num = 315;
    a.grade = 3.5;
    printf("이름 : %s\n", a.pf.name);
    printf("나이 : %d\n", a.pf.age);
    printf("키 : %.1lf\n", a.pf.height);
    printf("학번 : %d\n", a.num);
    printf("학점 : %.1lf\n", a.grade);
    return 0;
}
-------------------------------------------------
// 로또번호 생성기
#include <random> // 랜덤함수 사용을 위한 헤더파일 
// random_device, default_random_engine, uniform_int_distribution 
#include <functional> // bind 사용을 위한 헤더파일 
using namespace std; 
int main() 
{ 
int lotto[6]; // 생성된 번호를 저장할 배열  
int i, j; // 반복을 위한 변수  
int temp; // 값 교환 및 중복체크를 위한 임시변수  
int cnt = 0; // 중복 횟수를 세기 위한 변수  
// 현재 시간으로 랜덤함수의 시드값을 지정  
random_device rd; // 하드웨어 리소스를 통한 난수를 생성합니다.  
default_random_engine re(rd()); // 위의 난수를 시드로 하여 mt19937 랜덤 엔진을 선언합니다.  
uniform_int_distribution<int> dist(1, 45); // 난수의 범위를 지정합니다.  
auto rand = bind(dist, re); // 지정된 범위의 난수를 생성하는 rand 라는 난수 발생기를 생성합니다.  
// 이후에 rand(); 구문으로 1 ~ 45 범위의 난수를 생성할 수 있습니다. 
while (cnt != 7) // 숫자 중복의 횟수가 7이 아닐 동안 반복합니다.  
{ 
cnt = 0; // 중복 횟수 초기화  
for (i = 0; i < 6; i++) 
{ // 번호 6개 생성  
temp = rand();// 범위는 1부터 45까지입니다.  
lotto[i] = temp; // 현재 생성된 번호가  
for (j = 0; j < i; j++) // 이전에 생성된 번호와 같은지 비교합니다.  
if (lotto[j] == temp) // 중복된 게 있으면  
{ // 중복되지 않도록 다시 생성합니다.  
i--; 
cnt++; // 중복의 횟수도 증가시킵니다.  
} 
} 
// 번호 6개가 생성되었을 때 중복의 횟수가 7회이면 종료됩니다.  
// 이러면 뭔가 조금 더 유니크한 숫자들이 나오지 않을까 싶어서 추가한 겁니다...  
} 
// 오름차순 정렬  
for (i = 0; i < 5; i++) 
for (j = i + 1; j < 6; j++) 
if (lotto[i] > lotto[j]) 
{ 
temp = lotto[i]; 
lotto[i] = lotto[j]; 
lotto[j] = temp; 
} 
//정렬 후 최종 출력  
cout << "\t******* 로또 복권번호 생성기 *******\n\n"; 
cout << "생성된 행운의 번호 : "; 
for (i = 0; i < 6; i++) 
cout << lotto[i] << ' '; 
cout << endl << endl << "프로그램을 종료합니다." << endl; 
system("pause"); // 프로그램이 자동으로 종료되지 않도록 일시정지합니다.  
return 0; 
}
-------------------------------------------------
// 로또생성기 만들기
#include <random>
#include <functional>
using namespace std;
int main()
{
    int lotto[6];
    int i, j;
    int temp;
    int cnt=0;
    
    random_device rd;
    default_random_engine re(rd());
    uniform_int_distribution<int> dist(1,45);
    auto rand = bind(dist, re);
    while(cnt != 7)
    {
        cnt=0;
        for(i=0; i<6; i++)
        {
            temp = rand();
            lotto[i] = temp;
            for(j=0; j<i; j++)
            if(lotto[j] == temp)
            {
                i--;
                cnt++;
            }
        }
    }
    for(i=0; i<5; i++)
    for(j=i+1; j<6; j++)
    if(lotto[i] > lotto[j])
    {
        temp = lotto[i];
        lotto[i] = lotto[j];
        lotto[j] = temp;
    }
    printf("Lotto Number Generator\n\n");
    for(i=0; i<6; i++)
    printf("%d ", lotto[i]);
    printf("\n");
    printf("You are in first place");
}
-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <random>
#include <functional>
using namespace std;

void Multiplication_table(int a)
{
	printf("1번선택 구구단\n");
	scanf("%d", &a);
	for(int j=1; j<10; j++)
	{
	    printf("%d x %d = %d\n", a, j, a*j );
	}
}
void Plus(int a, int b)
{
	printf("2번선택 더하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a+b);
}
void Multiply(int a, int b)
{
    printf("3번선택 곱하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a*b);
}
void subtract(int a, int b)
{
	printf("4번선택 빼기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a-b);
}
int main()
{
	int select;
	int End = 999;
	int i=0;
	int a,b;
	int lotto[6];
    int k, j;
    int temp;
    int cnt=0;
	
	while(i < End){
	    printf("------------------------------------------------------\n");
		printf("1번 구구단, 2번 더하기, 3번 곱하기, 4번 빼기, 5번 종료\n6번 Lotto NumBer Generator\n");
		printf("------------------------------------------------------\n");
	    scanf("%d", &select);
		if(select == 1)
		{
		    Multiplication_table(a);
		}
		
		else if(select == 2)
		{
		    Plus(a,b);
		}
		
		else if(select == 3)
		{
		    Multiply(a,b);
		}
		else if(select == 4)
		{
		    subtract(a,b);
		}
		else if(select == 5)
		{
		    printf("5번선택 ");
		    printf("시스템 종료\n");
		    printf("------------------------------------------------------\n");
		    i = 999;
		}
		else if(select == 6)
		{
		    printf("6번선택 ");
		    printf("Lotto NumBer Generator\n");
		        random_device rd;
    default_random_engine re(rd());
    uniform_int_distribution<int> dist(1,45);
    auto rand = bind(dist, re);
    while(cnt != 7)
    {
        cnt=0;
        for(k=0; k<6; k++)
        {
            temp = rand();
            lotto[k] = temp;
            for(j=0; j<k; j++)
            if(lotto[j] == temp)
            {
                k--;
                cnt++;
            }
        }
    }
    for(k=0; k<5; k++)
    for(j=k+1; j<6; j++)
    if(lotto[k] > lotto[j])
    {
        temp = lotto[k];
        lotto[k] = lotto[j];
        lotto[j] = temp;
    }
    for(k=0; k<6; k++)
    printf("%d ", lotto[k]);
    printf("\n");
    printf("You are in first place\n");
		}
		else
		{
		    i=999;
			printf("시스템 종료");
			printf("------------------------------------------------------\n");
		}
		i++;
	}
}
-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <random>
#include <functional>
using namespace std;

void Multiplication_table(int a)
{
	printf("1번선택 구구단\n");
	scanf("%d", &a);
	for(int j=1; j<10; j++)
	{
	    printf("%d x %d = %d\n", a, j, a*j );
	}
}
void Plus(int a, int b)
{
	printf("2번선택 더하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a+b);
}
void Multiply(int a, int b)
{
    printf("3번선택 곱하기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a*b);
}
void subtract(int a, int b)
{
	printf("4번선택 빼기\n");
	scanf("%d %d", &a, &b);
	printf("값은 : %d\n", a-b);
}
int main()
{
	int select;
	int End = 999;
	int i=0;
	int a,b;
	int lotto[6];
    int k, j;
    int temp;
    int cnt=0;
	
	while(i < End){
	    printf("------------------------------------------------------\n");
		printf("1번 구구단, 2번 더하기, 3번 곱하기, 4번 빼기, 5번 종료\n6번 Lotto NumBer Generator\n");
		printf("------------------------------------------------------\n");
	    scanf("%d", &select);
		if(select == 1)
		{
		    Multiplication_table(a);
		}
		
		else if(select == 2)
		{
		    Plus(a,b);
		}
		
		else if(select == 3)
		{
		    Multiply(a,b);
		}
		else if(select == 4)
		{
		    subtract(a,b);
		}
		else if(select == 5)
		{
		    printf("5번선택 ");
		    printf("시스템 종료\n");
		    printf("------------------------------------------------------\n");
		    i = 999;
		}
		else if(select == 6)
		{
		    printf("6번선택 ");
		    printf("Lotto NumBer Generator\n");
		        random_device rd;
    default_random_engine re(rd());
    uniform_int_distribution<int> dist(1,45);
    auto rand = bind(dist, re);
    while(cnt != 7)
    {
        cnt=0;
        for(k=0; k<6; k++)
        {
            temp = rand();
            lotto[k] = temp;
            for(j=0; j<k; j++)
            if(lotto[j] == temp)
            {
                k--;
                cnt++;
            }
        }
    }
    for(k=0; k<5; k++)
    for(j=k+1; j<6; j++)
    if(lotto[k] > lotto[j])
    {
        temp = lotto[k];
        lotto[k] = lotto[j];
        lotto[j] = temp;
    }
    for(k=0; k<6; k++)
    printf("%d ", lotto[k]);
    printf("\n");
    printf("You are in first place\n");
		}
		else if(select == 7)
		{
		    printf("7번선택 ");
		    printf("줄 초기화\n");
		    printf("------------------------------------------------------\n");
		    for(int v=0; v<100; v++)
		    printf("\n");
		}
		else
		{
		    i=999;
			printf("시스템 종료");
			printf("------------------------------------------------------\n");
		}
		i++;
	}
} // (7번 추가한것)
------------------------------------------------- // base64 인코딩
/*
 Copyright (C) Information Equipment co.,LTD.
 All rights reserved.
 Code by JaeHyuk Cho <mailto:minzkn@infoeq.com>
 CVSTAG="$Header: /usr/local/mutihost/joinc/modules/moniwiki/data/text/RCS/Code_2fC_2fbase64,v 1.2 2007/01/24 02:16:30 root Exp root $"

 - Simple is best !
*/

#if !defined(__def_mzapi_source_base64_c__)
#define __def_mzapi_source_base64_c__ "base64.c"

#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <malloc.h>

#if !defined(__mzapi_peek_vector__)
# define __mzapi_peek_vector__(m_cast,m_base,m_sign,m_offset)         ((m_cast)(((unsigned char *)(m_base)) m_sign (size_t)(m_offset)))
#endif
#if !defined(mzapi_peek_byte)
# define mzapi_peek_byte(m_base,m_offset)                             (*__mzapi_peek_vector__(unsigned char *,m_base,+,m_offset))
#endif
#if !defined(mzapi_poke_byte)
# define mzapi_poke_byte(m_base,m_offset,m_value)                     (*__mzapi_peek_vector__(unsigned char *,m_base,+,m_offset)) = (unsigned char)(m_value)
#endif

static unsigned long (__mzapi_decode_base64__)(int s_character);
char * (mzapi_encode_base64)(const char * s_string);
char * (mzapi_decode_base64)(const char * s_string);
int main(int s_argc, char **s_argv);

static unsigned long (__mzapi_decode_base64__)(int s_character) 
{
      if((s_character) >= ((int)'a'))return((((unsigned long)(s_character)) - ((unsigned long)'a')) + 26lu); 
 else if((s_character) >= ((int)'A'))return(((unsigned long)(s_character)) - ((unsigned long)'A'));
 else if((s_character) >= ((int)'0'))return((((unsigned long)(s_character)) - ((unsigned long)'0')) + 52lu);
 else if((s_character) == ((int)'+'))return(62lu);
 else if((s_character) == ((int)'/'))return(63lu);
 return(0lu);
}

char * (mzapi_encode_base64)(const char * s_string)
{
 static const unsigned char c_alpha_table[] = {"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="};
 char * s_result;
 size_t s_length = strlen(s_string), s_source_offset = (size_t)0, s_target_offset = (size_t)0;
 unsigned long s_value;
 int s_quad, s_trip;
 s_result = (char *)malloc((((s_length + ((size_t)2)) / ((size_t)3)) << 2) + ((size_t)1));
 if(s_result == ((char *)0))return((char *)0);
 while(s_source_offset < s_length)
 {
  s_value = ((unsigned long)(mzapi_peek_byte((void *)s_string, s_source_offset) & ((int)0xff))) << 8; 
  if((s_source_offset + ((size_t)1)) < s_length)
  {
   s_value |= (unsigned long)(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)1)) & ((int)0xff)); 
   s_trip = (int)1;
  }
  else s_trip = (int)0;
  s_value <<= 8;
  if((s_source_offset + ((size_t)2)) < s_length)
  {
   s_value |= (unsigned long)(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)2)) & ((int)0xff)); 
   s_quad = (int)1;
  }
  else s_quad = (int)0;
  mzapi_poke_byte((void *)s_result, s_target_offset + ((size_t)3), (int)c_alpha_table[(s_quad == (int)1) ? (s_value & 0x3flu) : 64]);
  s_value >>= 6;
  mzapi_poke_byte((void *)s_result, s_target_offset + ((size_t)2), (int)c_alpha_table[(s_trip == (int)1) ? (s_value & 0x3flu) : 64]);
  s_value >>= 6;
  mzapi_poke_byte((void *)s_result, s_target_offset + ((size_t)1), (int)c_alpha_table[s_value & 0x3flu]);
  s_value >>= 6;
  mzapi_poke_byte((void *)s_result, s_target_offset, (int)c_alpha_table[s_value & 0x3flu]);
  s_source_offset += (size_t)3, s_target_offset += (size_t)4;
 }
 mzapi_poke_byte((void *)s_result, s_target_offset, (int)'\0');
 return(s_result);
}

char * (mzapi_decode_base64)(const char * s_string)
{
 char * s_result;
 size_t s_length = strlen(s_string), s_source_offset = (size_t)0, s_target_offset = (size_t)0;
 unsigned long s_value;
 s_result = (char *)malloc((((s_length + ((size_t)3)) >> 2) * ((size_t)3)) + ((size_t)1));
 if(s_result == ((char *)0))return((char *)0);
 while(s_source_offset < s_length)
 {
  s_value  = ((__mzapi_decode_base64__(mzapi_peek_byte((void *)s_string, s_source_offset)) & 0x3flu) << 18) |
             ((__mzapi_decode_base64__(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)1))) & 0x3flu) << 12) |
             ((__mzapi_decode_base64__(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)2))) & 0x3flu) << 6) |
             (__mzapi_decode_base64__(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)3))) & 0x3flu);
  mzapi_poke_byte((void *)s_result, s_target_offset++, (int)((s_value >> 16) & 0xfflu));
  if(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)2)) != ((int)'='))
  {
   mzapi_poke_byte((void *)s_result, s_target_offset++, (int)((s_value >> 8) & 0xfflu));
   if(mzapi_peek_byte((void *)s_string, s_source_offset + ((size_t)3)) != ((int)'='))mzapi_poke_byte((void *)s_result, s_target_offset++, (int)(s_value & 0xfflu));
  } 
  s_source_offset += (size_t)4;
 }
 mzapi_poke_byte((void *)s_result, s_target_offset, (int)'\0');
 return(s_result);
}

int main(int s_argc, char **s_argv)
{
 static char s_default[] = {"This is base64 test function - by Jen 공부하자 공부"};
 char *s_this, *s_encode, *s_decode;
 if(s_argc >= 2)s_this = (char *)(&s_argv[1][0]);
 else s_this = s_default;
 (void)fprintf(stdout, "original: \"%s\" (%d)\n", s_this, (int)strlen(s_this));
 s_encode = mzapi_encode_base64(s_this);
 if(s_encode != ((char *)0))
 {
  (void)fprintf(stdout, "encode  : \"%s\" (%d)\n", s_encode, (int)strlen(s_encode));
  s_decode = mzapi_decode_base64(s_encode);
  if(s_decode != ((char *)0))
  {
   (void)fprintf(stdout, "decode  : \"%s\" (%d)\n", s_decode, (int)strlen(s_decode));
   free((void *)s_decode);
  }
  free((void *)s_encode);
  printf("Base64 - 인코딩");
 }
 return(0);
}

#endif

/* End of source */
-------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <random>
#include <functional>


void Star_crater1(int Number1) // 별 증가코드
{
	printf("1 Select star up\n");
	scanf("%d", &Number1);
	for(int i=0; i<Number1; i++)
	{
		for(int j=0; j<=i; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}
void Star_crater2(int Number1) // 별 감소코드
{
	printf("2 Select star Down\n");
	scanf("%d", &Number1);
	for(int i=0; i<Number1; i++)
	{
		for(int j=0; j<=i; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}
void Star_crater3(int Number1) // 별 증가x2코드
{
	printf("1 Select star upx2\n");
	scanf("%d", &Number1);
	for(int i=0; i<Number1; i++)
	{
		for(int j=0; j<=i; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}
void Star_crater4(int Number1) // 별 피라미드
{
	printf("1 Select star pyramid\n");
	scanf("%d", &Number1);
	for(int i=0; i<Number1; i++)
	{
		for(int j=0; j<=i; j++)
		{
			printf("*");
		}
		printf("\n");
	}
}

int main()
{
    int select;
    int End = 999;
    int Number1;
    int Number2;
    int i=0;
    
    while(i < End){
	    printf("------------------------------------------------------\n");;
    
    scanf("%d", &select);
    if(select == 1)
        {
            Star_crater1(Number1);
        }
        esle if(select == 2)
        {
            Star_crater3(Number1);
        }
        esle if(select == 3)
        {
            Star_crater3(Number1);
        }
        esle if(select == 4)
        {
            Star_crater4(Number1);
        }
        else (select == 999)
		{
		    printf(" *** Number Select");
		    printf("System Off\n");
		    printf("------------------------------------------------------\n");
		    i = 999;
		}
    }
}
